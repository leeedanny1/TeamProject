<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.springboot.jcmarket.domain.product.ProductRepository">
  	
  	<!-- 공지사항 리스트 가져옴 -->
  	<!-- 인기상품 -->
  	<select id="getHotProductListAll" resultType="com.springboot.jcmarket.domain.product.Product">
		SELECT
			pm.item_code AS item_code,
			pm.item_title AS item_title,
			pm.item_date AS item_date,
			pm.item_count AS item_count,
			pd.like_count AS like_count,
			pd.item_price AS item_price,
			pd.tempFileNames AS tempFileNames
		FROM
			product_mst AS pm
			LEFT OUTER JOIN product_dtl AS pd ON(pm.item_code = pd.item_code)
		ORDER BY
			like_count DESC;
	</select>
  	<!-- 최근상품 -->
  	<select id="getNewProductListAll" resultType="com.springboot.jcmarket.domain.product.Product">
		SELECT
			pm.item_code AS item_code,
			pm.item_title AS item_title,
			pm.item_date AS item_date,
			pm.item_count AS item_count,
			pd.like_count AS like_count,
			pd.item_price AS item_price,
			pd.tempFileNames AS tempFileNames
		FROM
			product_mst AS pm
			LEFT OUTER JOIN product_dtl AS pd ON(pm.item_code = pd.item_code)
		ORDER BY
			item_code DESC;
	</select>
	
	<!-- 조회수 증가 -->
	<update id="plusItemCount">
		UPDATE
			product_mst
		SET
			item_count = item_count + 1
		WHERE
			item_code = #{item_code};
	</update>
  
  	<!-- 디테일 페이지 -->
  	<select id="getItemDtl" resultType="com.springboot.jcmarket.domain.product.Product">
		SELECT
			pm.item_code AS item_code,
			pm.item_title AS item_title,
			pm.item_writer AS item_writer,
			pm.item_date AS item_date,
			pm.item_count AS item_count,
			pd.now_sale AS now_sale,
			pd.like_count AS like_count,
			pd.item_price AS item_price,
			pd.item_stat AS item_stat,
			pd.item_change AS item_change,
			pd.item_delivery AS item_delivery,
			pd.item_content AS item_content,
			pd.tempFileNames AS tempFileNames,
			pd.create_date AS create_date,
			pd.update_date AS update_date,
			um.id AS id,
			um.user_nickname AS user_nickname,
			pl.user_id AS like_id
		FROM
			product_mst AS pm
			LEFT OUTER JOIN product_dtl AS pd ON(pm.item_code = pd.item_code)
			LEFT OUTER JOIN user_mst AS um ON(pm.item_writer = um.id)
			LEFT OUTER JOIN product_like AS pl ON(pl.item_code = pm.item_code and pl.user_id = #{user_id})
		WHERE
			pm.item_code = #{item_code};
	</select>
  
  	<!-- 상품등록 -->
  	<insert id="productMstInsert" parameterType="com.springboot.jcmarket.domain.product.Product">
		INSERT INTO
			product_mst(
				item_title,
				item_writer,
				item_date
			)
		VALUES(
			#{item_title},
			#{item_writer},
			NOW()
		);
	</insert>
	<insert id="productDtlInsert" parameterType="com.springboot.jcmarket.domain.product.Product">
		INSERT INTO
			product_dtl(
				item_price,
				item_stat,
				item_change,
				item_delivery,
				item_content,
				tempFileNames,
				create_date,
				update_date
			)
		VALUES(
			#{item_price},
			#{item_stat},
			#{item_change},
			#{item_delivery},
			#{item_content},
			#{tempFileNames},
			(SELECT item_date FROM product_mst WHERE item_code = (SELECT MAX(item_code) FROM product_mst)),
			(SELECT item_date FROM product_mst WHERE item_code = (SELECT MAX(item_code) FROM product_mst))
		);
	</insert>
	
	<!-- 상품수정 -->
  	<update id="productMstUpdate" parameterType="com.springboot.jcmarket.domain.product.Product">
		UPDATE
			product_mst
		SET
			item_title = #{item_title}
		WHERE
			item_code = #{item_code};
	</update>
	<update id="productDtlUpdate" parameterType="com.springboot.jcmarket.domain.product.Product">
		UPDATE
			product_dtl
		SET
			item_price = #{item_price},
			item_stat = #{item_stat},
			item_change = #{item_change},
			item_delivery = #{item_delivery},
			item_content = #{item_content},
			tempFileNames = #{tempFileNames}
		WHERE
			item_code = #{item_code};
	</update>
	
	<!-- 상품삭제 -->
	<delete id="productDelete">
		DELETE
		FROM
			product_mst
		WHERE
			item_code = #{item_code}
	</delete>
  
  
   <update id="upLikeCount" parameterType="com.springboot.jcmarket.domain.product.Product">
        UPDATE 
            product_dtl
        SET 
            like_count=like_count + 1 
        WHERE
            item_code = #{item_code}
  </update>
  
   <update id="downLikeCount" parameterType="com.springboot.jcmarket.domain.product.Product">
        UPDATE
           product_dtl 
        SET 
           like_count = like_count- 1 
        WHERE 
           item_code = #{item_code}
        
   </update>
   
    <select id="getLikeCount" parameterType="com.springboot.jcmarket.domain.product.Product" resultType="Integer">
        SELECT 
          like_count 
        FROM
          product_dtl
        WHERE
          item_code = #{item_code}
</select>
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
     <insert id = "addLike"  parameterType="com.springboot.jcmarket.domain.product.Product">
        insert into
         product_like
        values 
        (
         #{item_code},
         #{user_id},
         now()
        )

     </insert>
      
      
    <delete id = "deleteLike" parameterType="com.springboot.jcmarket.domain.product.Product">
       delete
        from
         product_like
       where
        user_id = #{user_id} and item_code = #{item_code}  
    
    </delete>
  
  
     <select id = "getProduct" parameterType="com.springboot.jcmarket.domain.product.Product" resultType="com.springboot.jcmarket.domain.product.Product">
     select
 	  *
     from
	  product_mst pm
	  left outer join product_dtl pd on(pd.item_code = pm.item_code)
	  left outer join product_like pl on(pl.item_code = pm.item_code  and user_id = #{user_id})
     where
      pm.item_code = #{item_code};
     
    </select>
    
    <select id ="searchProduct" resultType="com.springboot.jcmarket.domain.product.Product">
      select
        pm.item_code, pm.item_writer, pm.item_title, pd.create_date, pd.update_date,  pd.item_price, pd.item_content
      from
       product_mst pm
      left outer join product_dtl pd on(pd.item_code = pm.item_code)
      where
       pm.item_writer like concat('%',#{search_content},'%') or 
       pm.item_title like concat('%',#{search_content},'%') or 
       pd.item_content like concat('%',#{search_content},'%')
  
    </select>
    
    
     <select id ="getSaleProduct" resultType="com.springboot.jcmarket.domain.product.Product">
     SELECT
        *
     FROM
        product_mst pm
     LEFT OUTER JOIN product_dtl pd ON(pm.item_code = pd.item_code)
     WHERE
      item_writer = #{id};
  </select>
  
    <select id ="getSelectProduct" resultType="com.springboot.jcmarket.domain.product.Product">
    select 
    *
   from 
    product_mst pm 
   left outer join product_dtl pd on(pd.item_code = pm.item_code) 
   left outer join product_like pl on(pl.item_code = pm.item_code)
   where
 	pl.user_id = #{id};
  </select>
  
  </mapper>